// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(MusicContext))]
    [Migration("20211126094728_EditTables")]
    partial class EditTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0dbd93a9-2854-4f9c-a72b-c7e8dcf3d3f0",
                            ConcurrencyStamp = "2812dcbd-1fab-44e5-a170-a20189ef4ad0",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "df7a2003-6615-474e-9a8b-7836d54945f1",
                            ConcurrencyStamp = "a745bef1-7e2a-458c-a8c4-f74deaf92727",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.ConcertAPI.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datetime_Local")
                        .HasColumnType("datetime2");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("Models.ConcertAPI.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Average_Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<string>("Highest_Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Listing_Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lowest_Price")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Models.ConcertAPI.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<string>("Display_location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId")
                        .IsUnique();

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hard rock is a form of loud, aggressive rock music.",
                            Name = "Hard rock"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Blues rock is a fusion music genre that combines elements of blues and rock music.",
                            Name = "Blues rock"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Heavy metal is a genre of rock music that developed in the late 1960s and early 1970s.",
                            Name = "Heavy metal"
                        });
                });

            modelBuilder.Entity("Models.GenreGroup", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GenreGroup");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            GenreId = 2,
                            GroupId = 1
                        },
                        new
                        {
                            GenreId = 3,
                            GroupId = 1
                        });
                });

            modelBuilder.Entity("Models.GenreMusicAlbum", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MusicAlbumId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MusicAlbumId");

                    b.HasIndex("MusicAlbumId");

                    b.ToTable("GenreMusicAlbum");
                });

            modelBuilder.Entity("Models.GenreMusician", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MusicianId");

                    b.HasIndex("MusicianId");

                    b.ToTable("GenreMusician");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            MusicianId = 1
                        },
                        new
                        {
                            GenreId = 2,
                            MusicianId = 2
                        },
                        new
                        {
                            GenreId = 2,
                            MusicianId = 3
                        },
                        new
                        {
                            GenreId = 1,
                            MusicianId = 4
                        },
                        new
                        {
                            GenreId = 1,
                            MusicianId = 5
                        },
                        new
                        {
                            GenreId = 3,
                            MusicianId = 6
                        },
                        new
                        {
                            GenreId = 3,
                            MusicianId = 7
                        },
                        new
                        {
                            GenreId = 3,
                            MusicianId = 8
                        });
                });

            modelBuilder.Entity("Models.GenreSong", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("GenreSong");
                });

            modelBuilder.Entity("Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Australia",
                            Name = "AC/DC"
                        });
                });

            modelBuilder.Entity("Models.MusicAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Released")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("MusicAlbums");
                });

            modelBuilder.Entity("Models.MusicInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MusicInstruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "music instrument",
                            Name = "Gitar"
                        },
                        new
                        {
                            Id = 2,
                            Description = "music instrument",
                            Name = "Violet"
                        },
                        new
                        {
                            Id = 3,
                            Description = "music instrument",
                            Name = "Drums"
                        },
                        new
                        {
                            Id = 4,
                            Description = "music instrument",
                            Name = "Bass guitar"
                        },
                        new
                        {
                            Id = 5,
                            Description = "music instrument",
                            Name = "Vocal"
                        });
                });

            modelBuilder.Entity("Models.MusicInstrumentMusician", b =>
                {
                    b.Property<int>("MusicInstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.HasKey("MusicInstrumentId", "MusicianId");

                    b.HasIndex("MusicianId");

                    b.ToTable("MusicInstrumentMusician");
                });

            modelBuilder.Entity("Models.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Musicians");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Australia",
                            FirstName = "Phils",
                            GroupId = 1,
                            LastName = "Rudd"
                        },
                        new
                        {
                            Id = 2,
                            Country = "England",
                            FirstName = "Clifford",
                            GroupId = 1,
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 3,
                            Country = "England",
                            FirstName = "Brian",
                            GroupId = 1,
                            LastName = "Francis"
                        },
                        new
                        {
                            Id = 4,
                            Country = "England",
                            FirstName = "Jimi",
                            GroupId = 1,
                            LastName = "Hendrix"
                        },
                        new
                        {
                            Id = 5,
                            Country = "England",
                            FirstName = "James",
                            GroupId = 1,
                            LastName = "Patrick"
                        },
                        new
                        {
                            Id = 6,
                            Country = "England",
                            FirstName = "Eric",
                            GroupId = 1,
                            LastName = "Clapton"
                        },
                        new
                        {
                            Id = 7,
                            Country = "England",
                            FirstName = "Bernard",
                            GroupId = 1,
                            LastName = "Rich"
                        },
                        new
                        {
                            Id = 8,
                            Country = "England",
                            FirstName = "Jack",
                            GroupId = 1,
                            LastName = "DeJohnette"
                        });
                });

            modelBuilder.Entity("Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("time");

                    b.Property<int>("MusicAlbumId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Released")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MusicAlbumId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ConcertAPI.Stat", b =>
                {
                    b.HasOne("Models.ConcertAPI.Concert", "Concert")
                        .WithOne("Stats")
                        .HasForeignKey("Models.ConcertAPI.Stat", "ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Models.ConcertAPI.Venue", b =>
                {
                    b.HasOne("Models.ConcertAPI.Concert", "Concert")
                        .WithOne("Venue")
                        .HasForeignKey("Models.ConcertAPI.Venue", "ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Models.GenreGroup", b =>
                {
                    b.HasOne("Models.Genre", "Genre")
                        .WithMany("GenreGroups")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Group", "Group")
                        .WithMany("GenreGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Models.GenreMusicAlbum", b =>
                {
                    b.HasOne("Models.Genre", "Genre")
                        .WithMany("GenreMusicAlbums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.MusicAlbum", "MusicAlbum")
                        .WithMany("GenreMusicAlbums")
                        .HasForeignKey("MusicAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("MusicAlbum");
                });

            modelBuilder.Entity("Models.GenreMusician", b =>
                {
                    b.HasOne("Models.Genre", "Genre")
                        .WithMany("GenreMusicians")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Musician", "Musician")
                        .WithMany("GenreMusicians")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Models.GenreSong", b =>
                {
                    b.HasOne("Models.Genre", "Genre")
                        .WithMany("GenreSongs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Song", "Song")
                        .WithMany("GenreSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Models.MusicAlbum", b =>
                {
                    b.HasOne("Models.Group", "Group")
                        .WithMany("MusicAlbums")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Models.MusicInstrumentMusician", b =>
                {
                    b.HasOne("Models.MusicInstrument", "MusicInstrument")
                        .WithMany("MusicInstrumentMusicians")
                        .HasForeignKey("MusicInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Musician", "Musician")
                        .WithMany("MusicInstrumentMusicians")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("MusicInstrument");
                });

            modelBuilder.Entity("Models.Musician", b =>
                {
                    b.HasOne("Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Models.Song", b =>
                {
                    b.HasOne("Models.MusicAlbum", "MusicAlbum")
                        .WithMany("Songs")
                        .HasForeignKey("MusicAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicAlbum");
                });

            modelBuilder.Entity("Models.ConcertAPI.Concert", b =>
                {
                    b.Navigation("Stats");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Models.Genre", b =>
                {
                    b.Navigation("GenreGroups");

                    b.Navigation("GenreMusicAlbums");

                    b.Navigation("GenreMusicians");

                    b.Navigation("GenreSongs");
                });

            modelBuilder.Entity("Models.Group", b =>
                {
                    b.Navigation("GenreGroups");

                    b.Navigation("Members");

                    b.Navigation("MusicAlbums");
                });

            modelBuilder.Entity("Models.MusicAlbum", b =>
                {
                    b.Navigation("GenreMusicAlbums");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Models.MusicInstrument", b =>
                {
                    b.Navigation("MusicInstrumentMusicians");
                });

            modelBuilder.Entity("Models.Musician", b =>
                {
                    b.Navigation("GenreMusicians");

                    b.Navigation("MusicInstrumentMusicians");
                });

            modelBuilder.Entity("Models.Song", b =>
                {
                    b.Navigation("GenreSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
